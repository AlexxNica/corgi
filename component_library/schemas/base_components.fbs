// Copyright 2015 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

include "bullet_def.fbs";
include "common.fbs";

namespace fpl;

// Data definitions for the components in the standard component library.

table CommonServicesDef {}

table TransformDef {
  position:Vec3;
  scale:Vec3;
  orientation:Vec3;
  child_ids:[string];
}

// How to allow selection of this entity, in the editor.
enum EditorSelectionOption:ubyte {
     Unspecified, // Not specified, so you don't overwrite a prototype value.
     Any,         // Allow this entity to be selected by any means.
     None,        // Never allow this entity to be selected.
     CycleOnly,   // Only allow this entity to be cycled through.
     PointerOnly, // Only allow this to be pointed at, not cycled through.
}

// When to render this entity: in the editor, not in the editor, etc.
enum EditorRenderOption:ubyte {
     Unspecified,  // Not specified, so you don't overwrite a prototype value.
     Always,       // Always render this entity.
     OnlyInEditor, // Only render when in the editor.
     NotInEditor,  // Only render when outside the editor.
}

table EditorDef {
  // Each entity has a unique entity ID. This includes entity prototypes.
  // If you don't specify the entity ID for your entity, it will be automatically
  // generated when needed.
  entity_id:string;

  // If this entity is based on a prototype, the prototype's entity ID goes here.
  prototype:string;

  // A human-readable comment to remember what this entity is for.
  comment:string;

  ignore_selection:byte = -1 (deprecated);

  // How to select this item in the editor (cycling thru, mouse pointer, etc.)
  selection_option:EditorSelectionOption = Unspecified;

  // Whether to render the object always, only in edit mode, etc.
  render_option:EditorRenderOption = Unspecified;
}

enum RenderPass:ubyte {
  kOpaque,
  kAlpha,
  kCount
}

table RenderMeshDef {
  source_file:string;
  shader:string;
  ignore_culling:bool = false;
  render_pass: [RenderPass];
  hidden:bool = false;
}

table PhysicsDef {
  shapes:[BulletShapeDef];
  kinematic:bool = false;
}
