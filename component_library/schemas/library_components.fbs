// Copyright 2015 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

include "bullet_def.fbs";
include "common.fbs";

namespace corgi;

// Data definitions for the components in the standard component library.

table CommonServicesDef {}

table TransformDef {
  position:fplbase.Vec3;
  scale:fplbase.Vec3;
  orientation:fplbase.Vec3;
  child_ids:[string];
}

table MetaDef {
  // Each entity has a unique entity ID. This includes entity prototypes.
  // If you don't specify the entity ID for your entity, it will be automatically
  // generated when needed.
  entity_id:string;

  // If this entity is based on a prototype, the prototype's entity ID goes here.
  prototype:string;

  // A human-readable comment to remember what this entity is for.
  comment:string;
}

enum RenderPass:ubyte {
  Opaque,
  Alpha,
  Count
}

enum CullingTest:ubyte {
  Distance,
  ViewAngle,
  Count
}

table RenderMeshDef {
  source_file:string;
  shader:string;
  culling:[CullingTest];
  render_pass:[RenderPass];
  visible:bool = true;

  // Ignore animations and pose the mesh as it was exported.
  // Useful for debugging problems with the mesh_pipeline.
  default_pose:bool = false;
}

table PhysicsDef {
  shapes:[BulletShapeDef];
  kinematic:bool = false;
}

table AnimationDef {
  // Object in the AnimTable that holds the array of animations.
  anim_table_object:int;

  // Initial index into the array of animations specified by anim_table_object.
  // To play additional animations after this one, call
  // AnimationComponent::AnimateFromTable().
  anim_table_start_idx:int;

  // If true, output animation values for every scale, rotate, and translate,
  // on every bone for this entity. It's a lot of information, but can be
  // piped into a .csv (comma separated values) file and opened in a
  // spreadsheet.
  debug:bool = false;
}

table GraphDef {
  filename_list:[string];
}
